//Input: unmarked, connected graph with integer edge labels
//Output: the input graph with the following modifications:
//  - a minimum spanning tree is highlighted with blue edges
//  - the nodes are marked red
//  - there is an additional unmarked root node with an outgoing red edge

Main = Preprocess; Loop!
Loop = if one_tree then break else Body
Body = TreesLoop!; MergeTrees; Rewind!
TreesLoop = root_current; TraverseTree; MarkForDeletion; CleanUp; try next_tree else break
TraverseTree = ColourBlue; FindEdge
CleanUp = ColourRed; unroot_red!

FindEdge = find_init; create_flag; FindLoop!; destroy_flag
FindLoop = find_forward!; if flag then Minimise! else (try MinSetup); try find_back else break
MinSetup = try min_init2 then Success else (try min_init1 then Success)
Success = MinWithS!; set_flag
Minimise = try MinWithN else MinWithoutN
MinWithS = {min_s, min_sn, min_sp, min_snp, min1_st, min2_st}
MinWithN = {min_n, min_np, min_sn, min_snp, min_tn, min_tnp}
MinWithoutN = {min, min_p, min_s, min_sp, min_t, min_tp, min1_st, min2_st}

ColourBlue = blue_init; BlueLoop!
BlueLoop = blue_forward!; try blue_back else break

MergeTrees = merge_init; MergeLoop!; MergeClean!; unroot_red
MergeLoop = MergeTree!; try next_root else break
MergeTree = down!; add_edge!; try up else break
MergeClean = try ColourRed; try previous_root else break
PreviousRoot = {previous_root1, previous_root2}

ColourRed = red_init; RedLoop!
RedLoop = red_forward!; try red_back else break

Preprocess = pre_init; PreLoop!; unroot_red
PreLoop = PreForward!; try pre_back else break
PreForward = {pre_forward1, pre_forward2}

Rewind = try remove_mid else RemoveEnd
RemoveEnd = try {remove_top, remove_bottom} else keep

MarkForDeletion = try clean else Mark; unroot_red
Mark = if red_loop then skip else add_loop


blue_back (a,x,y:list)
[
	(n0, x#blue)
	(n1(R), y#blue)
	|
	(e0(B), n0, n1, a#dashed)
]
=>
[
	(n0(R), x#blue)
	(n1, y#blue)
	|
	(e0(B), n0, n1, a#blue)
]
interface = 
{
n0, n1
}

blue_forward (a,x,y:list)
[
	(n0(R), x#blue)
	(n1, y#red)
	|
	(e0(B), n0, n1, a#blue)
]
=>
[
	(n0, x#blue)
	(n1(R), y#blue)
	|
	(e0(B), n0, n1, a#dashed)
]
interface = 
{
n0, n1
}

blue_init (x:list)
[
	(n0(R), x#red)
	|
]
=>
[
	(n0(R), x#blue)
	|
]
interface = 
{
n0
}

red_forward (a,x,y:list)
[
	(n0(R), x#red)
	(n1, y#grey)
	|
	(e0(B), n0, n1, a#blue)
]
=>
[
	(n0, x#red)
	(n1(R), y#red)
	|
	(e0(B), n0, n1, a#dashed)
]
interface = 
{
n0, n1
}

red_init (x:list)
[
	(n0(R), x#grey)
	|
]
=>
[
	(n0(R), x#red)
	|
]
interface = 
{
n0
}

red_back (a,x,y:list)
[
	(n0, x#red)
	(n1(R), y#red)
	|
	(e0(B), n0, n1, a#dashed)
]
=>
[
	(n0(R), x#red)
	(n1, y#red)
	|
	(e0(B), n0, n1, a#blue)
]
interface = 
{
n0, n1
}

min_tn (i,j:int; x,y,z:list)
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n2, n1, j#green)
]
=>
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i:0#green)
	(e1(B), n2, n1, j)
]
interface = 
{
n0, n1, n2
}
where i<=j


create_flag ()
[
	|
]
=>
[
	(n0(R), 0#green)
	|
]
interface = 
{

}

min_snp (i,j:int; x,y,z:list)
[
	(n2(R), z#red)
	(n1, y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n0, n2, j:0#green)
]
=>
[
	(n2, z#red)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i:0#green)
	(e1(B), n0, n2, j#green)
]
interface = 
{
n0, n1, n2
}
where i<j





min_p (i,j:int; x,y,z,t:list)
[
	(n3(R), t#red)
	(n2, z#grey)
	(n1, y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i)
	(e1(B), n2, n3, j:0#green)
]
=>
[
	(n3, t#red)
	(n2, z#grey>)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n2, n3, j#green)
]
interface = 
{
n0, n1, n2, n3
}
where i<j


min_init2 (i:int; x,y:list)
[
	(n0(R), x#grey)
	(n1, y#red)
	|
	(e0(B), n0, n1, i#green)
]
=>
[
	(n0(R), x#grey)
	(n1(R), y#red>)
	|
	(e0(B), n0, n1, i:0#green)
]
interface = 
{
n0, n1
}


find_init (x:list)
[
	(n0(R), x#blue)
	|
]
=>
[
	(n0(R), x#grey)
	|
]
interface = 
{
n0
}


find_forward (a,x,y:list)
[
	(n0(R), x#grey)
	(n1, y#blue)
	|
	(e0(B), n0, n1, a#blue)
]
=>
[
	(n0, x#grey)
	(n1(R), y#grey)
	|
	(e0(B), n0, n1, a#dashed)
]
interface = 
{
n0, n1
}


min_tp (i,j:int; x,y,z:list)
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey>)
	|
	(e0(B), n0, n1, i)
	(e1(B), n2, n1, j:0#green)
]
=>
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n2, n1, j#green)
]
interface = 
{
n0, n1, n2
}
where i<j

flag ()
[
	(n0(R), 1#green)
	|
]
=>
[
	(n0(R), 1#green)
	|
]
interface = 
{
n0
}

set_flag ()
[
	(n0(R), 0#green)
	|
]
=>
[
	(n0(R), 1#green)
	|
]
interface = 
{
n0
}

min_s (i,j:int; x,y,z:list)
[
	(n0(R), x#grey)
	(n1, y#red)
	(n2(R), z#red)
	|
	(e1(B), n0, n2, j#green)
	(e0(B), n0, n1, i)
]
=>
[
	(n0(R), x#grey)
	(n1(R), y#red)
	(n2, z#red)
	|
	(e1(B), n0, n2, j)
	(e0(B), n0, n1, i#green)
]
interface = 
{
n0, n1, n2
}
where i<j


min1_st (i,j:int; x,y:list)
[
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e2, n0, n1, j#green)
	(e0(B), n0, n1, i)
]
=>
[
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e2, n0, n1, j)
	(e0(B), n0, n1, i#green)
]
interface = 
{
n0, n1
}
where i<j


min (i,j:int; x,y,z,t:list)
[
	(n0(R), x#grey)
	(n1, y#red)
	(n2, z#grey)
	(n3(R), t#red>)
	|
	(e1(B), n2, n3, j#green)
	(e0(B), n0, n1, i)
]
=>
[
	(n0(R), x#grey)
	(n1(R), y#red)
	(n2, z#grey)
	(n3, t#red)
	|
	(e1(B), n2, n3, j)
	(e0(B), n0, n1, i#green)
]
interface = 
{
n0, n1, n2, n3
}
where i<j


destroy_flag (x:list)
[
	(n0(R), 1#green)
	|
]
=>
[
	|
]
interface = 
{

}

min_sn (i,j:int; x,y,z:list)
[
	(n2(R), z#red)
	(n1, y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n0, n2, j#green)
]
=>
[
	(n2, z#red)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i:0#green)
	(e1(B), n0, n2, j)
]
interface = 
{
n0, n1, n2
}
where i<=j


min_init1 (a,x,y:list)
[
	(n0(R), x#grey)
	(n1, y#red)
	|
	(e0(B), n0, n1, a)
]
=>
[
	(n0(R), x#grey)
	(n1(R), y#red)
	|
	(e0(B), n0, n1, a#green)
]
interface = 
{
n0, n1
}


find_back (a,x,y:list)
[
	(n0, x#grey)
	(n1(R), y#grey)
	|
	(e0(B), n0, n1, a#dashed)
]
=>
[
	(n0(R), x#grey)
	(n1, y#grey)
	|
	(e0(B), n0, n1, a#blue)
]
interface = 
{
n0, n1
}


min_n (i,j:int; x,y,z,t:list)
[
	(n3(R), t#red)
	(n2, z#grey)
	(n1, y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n2, n3, j#green)
]
=>
[
	(n3, t#red)
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i:0#green)
	(e1(B), n2, n3, j)
]
interface = 
{
n0, n1, n2, n3
}
where i<=j


min2_st (i,j:int; x,y:list)
[
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e2, n1, n0, j#green)
	(e0(B), n0, n1, i)
]
=>
[
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e2, n1, n0, j)
	(e0(B), n0, n1, i#green)
]
interface = 
{
n0, n1
}
where i<j


min_t (i,j:int; x,y,z:list)
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i)
	(e1(B), n2, n1, j#green)
]
=>
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n2, n1, j)
]
interface = 
{
n0, n1, n2
}
where i<j

min_sp (i,j:int; x,y,z:list)
[
	(n2(R), z#red)
	(n1, y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i)
	(e1(B), n0, n2, j:0#green)
]
=>
[
	(n2, z#red)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n0, n2, j#green)
]
interface = 
{
n0, n1, n2
}
where i<j


min_tnp (i,j:int; x,y,z:list)
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n2, n1, j:0#green)
]
=>
[
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i:0#green)
	(e1(B), n2, n1, j#green)
]
interface = 
{
n0, n1, n2
}
where i<j

min_np (i,j:int; x,y,z,t:list)
[
	(n3(R), t#red)
	(n2, z#grey)
	(n1, y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i#green)
	(e1(B), n2, n3, j:0#green)
]
=>
[
	(n3, t#red)
	(n2, z#grey)
	(n1(R), y#red)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, i:0#green)
	(e1(B), n2, n3, j#green)
]
interface = 
{
n0, n1, n2, n3
}
where i<j


remove_mid (i:int; x,y,z:list)
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i)
	(n3, z#red)
	|
	(e0, n2, n1, empty#red)
	(e2, n1, n3, empty#red)
	(e3, n1, n1, empty#red)
	(e1, n0, n1, empty#red)
]
=>
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i-1)
	(n3, z#red)
	|
	(e4, n2, n0, empty#red)
	(e5, n0, n3, empty#red)
]
interface = 
{
n0, n1, n2, n3
}


remove_bottom (i:int; x,y:list)
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i)
	|
	(e0, n2, n1, empty#red)
	(e2, n1, n1, empty#red)
	(e1, n0, n1, empty#red)
]
=>
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i-1)
	|
	(e3, n2, n0, empty#red)
]
interface = 
{
n0, n1, n2
}


remove_top (i:int; x,y:list)
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i)
	|
	(e0, n2, n0, empty#red)
	(e1, n0, n1, empty#red)
	(e2, n0, n0, empty#red)
]
=>
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i-1)
	|
	(e3, n2, n1, empty#red)
]
interface = 
{
n0, n1, n2
}


keep (i:int; x,y:list)
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i)
	|
	(e0, n2, n1, empty#red)
	(e1, n0, n1, empty#red)
]
=>
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), i)
	|
	(e3, n2, n0, empty#red)
	(e1, n0, n1, empty#red)
]
interface = 
{
n0, n1, n2
}

next_tree (x,y,z:list)
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), z)
	|
	(e1, n2, n0, empty#red)
	(e0, n0, n1, empty#red)
]
=>
[
	(n0, x#red)
	(n1, y#red)
	(n2(R), z)
	|
	(e2, n2, n1, empty#red)
	(e0, n0, n1, empty#red)
]
interface = 
{
n0, n1, n2
}

root_current(x,y:list)
[
	(n0, x#red)
	(n1(R), y)
	|
	(e0, n1, n0, empty#red)
]
=>
[
	(n0(R), x#red)
	(n1(R), y)
	|
	(e0, n1, n0, empty#red)
]
interface = 
{
n0, n1
}


one_tree ()
[
	(n1(R), 1)
	|
]
=>
[
	(n1(R), 1)
	|
]
interface = 
{
n1
}

unroot_red (x:list)
[
	(n0(R), x#red)
	|
]
=>
[
	(n0, x#red)
	|
]
interface = 
{
n0
}


down (a,x,y:list)
[
	(n0(R), x#grey)
	(n1, y#red)
	|
	(e0(B), n0, n1, a#blue)
]
=>
[
	(n0, x#grey)
	(n1(R), y#grey)
	|
	(e0(B), n0, n1, a#dashed)
]
interface = 
{
n0, n1
}

add_edge (a,x,y:list)
[
	(n0(R), x#grey)
	(n1, y#red)
	|
	(e0(B), n0, n1, a#green)
]
=>
[
	(n0(R), x#grey
	(n1, y#red)
	|
	(e0(B), n0, n1, a#blue)
]
interface = 
{
n0, n1
}

next_root (x,y:list)
[
	(n1(R), y#grey)
	(n0, x#red)
	|
	(e0, n0, n1, empty#red)
]
=>
[
	(n1, y#grey)
	(n0(R), x#grey)
	|
	(e0, n0, n1, empty#red)
]
interface = 
{
n0, n1
}

up (a,x,y:list)
[
	(n1(R), y#grey)
	(n0, x#grey)
	|
	(e0(B), n0, n1, a#dashed)
]
=>
[
	(n1, y#grey)
	(n0(R), x#grey)
	|
	(e0(B), n0, n1, a#blue)
]
interface = 
{
n0, n1
}

previous_root (x,y:list)
[
	(n0(R), x#red)
	(n1, y#any)
	|
	(e0, n0, n1, empty#red)
]
=>
[
	(n0, x#red)
	(n1(R), y#any)
	|
	(e0, n0, n1, empty#red)
]
interface = 
{
n0, n1
}


merge_init (x,y:list)
[
	(n0(R), x)
	(n1, y#red)
	|
	(e0, n0, n1, empty#red)
]
=>
[
	(n0(R), x)
	(n1(R), y#grey)
	|
	(e0, n0, n1, empty#red)
]
interface = 
{
n0, n1
}

pre_forward1 (i:int; a,x,y:list)
[
	(n2(R), i)
	(n1, y)
	(n0(R), x#red)
	|
	(e0(B), n0, n1, a)
	(e1, n2, n0, empty#red)
]
=>
[
	(n2(R), i+1)
	(n1(R), y#red)
	(n0, x#red)
	|
	(e0(B), n0, n1, a#dashed)
	(e3, n1, n0, empty#red)
	(e2, n2, n1, empty#red)
]
interface = 
{
n0, n1, n2
}


pre_forward2 (i:int; a,x,y,z:list)
[
	(n3, z#red)
	(n2(R), i)
	(n1, y)
	(n0(R), x#red)
	|
	(e0(B), n0, n1, a)
	(e1, n2, n3, empty#red)
]
=>
[
	(n3, z#red)
	(n2(R), i+1)
	(n1(R), y#red)
	(n0, x#red)
	|
	(e0(B), n0, n1, a#dashed)
	(e3, n1, n3, empty#red)
	(e2, n2, n1, empty#red)
]
interface = 
{
n0, n1, n2, n3
}


pre_back (a,x,y:list)
[
	(n0, x#red)
	(n1(R), y#red)
	|
	(e0(B), n0, n1, a#dashed)
]
=>
[
	(n0(R), x#red)
	(n1, y#red)
	|
	(e0(B), n0, n1, a)
]
interface = 
{
n0, n1
}


pre_init (x:list)
[
	(n0, x)
	|
]
=>
[
	(n0(R), x#red)
	(n1(R), 1)
	|
	(e0, n1, n0, empty#red)
]
interface = 
{
n0
}


clean (i:int; x,y:list)
[
	(n0, x#grey)
	(n1(R), y#red)
	|
	(e0(B), n0, n1, i:0#green)
]
=>
[
	(n0, x#grey)
	(n1(R), y#red)
	|
	(e0(B), n0, n1, i#green)
]
interface = 
{
n0, n1
}


red_loop (x:list)
[
	(n0(R), x#grey)
	|
	(e0, n0, n0, empty#red)
]
=>
[
	(n0(R), x#grey)
	|
	(e0, n0, n0, empty#red)
]
interface = 
{
n0
}

add_loop (x:list)
[
	(n0(R), x#grey)
	|
]
=>
[
	(n0(R), x#grey)
	|
	(e1, n0, n0, empty#red)
]
interface = 
{
n0
}
